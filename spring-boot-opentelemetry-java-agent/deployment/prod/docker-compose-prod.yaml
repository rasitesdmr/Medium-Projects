version: '3.8'
services:

## Servislerin çalışması için gerekli olan image'ler

  order-service:
    container_name: order-service
    build:
      context: ../../order-service
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    env_file:
      - .env
    environment:
      - JAVA_TOOL_OPTIONS=${JAVA_TOOL_OPTIONS_ORDER_SERVICE}
    volumes:
      - ../javaagent:/otelagent
    depends_on:
      - postgresql-database
      - redpanda
      - kafka

  stock-service:
    container_name: stock-service
    build:
      context: ../../stock-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    env_file:
      - .env
    environment:
      - JAVA_TOOL_OPTIONS=${JAVA_TOOL_OPTIONS_STOCK_SERVICE}
    volumes:
      - ../javaagent:/otelagent
    depends_on:
      - postgresql-database
      - order-service
      - redpanda
      - kafka

  postgresql-database:
    container_name: postgresql-database
    image: postgres:16.2
    ports:
      - "5432:5432"
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ../sql/init-multiple-db.sql:/docker-entrypoint-initdb.d/init-multiple-db.sql

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    hostname: kafka
    ports:
      - '9092:9092'
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:29093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092

  redpanda:
    image: docker.redpanda.com/redpandadata/console:latest
    restart: always
    container_name: redpanda-console
    environment:
      KAFKA_BROKERS: kafka:29092
    ports:
      - "8090:8080"
    depends_on:
      - kafka


## Buradan itibaren opentelemetry gerekli olan image'ler

  collector:
    container_name: collector
    image: otel/opentelemetry-collector-contrib:0.91.0
    volumes:
      - ./otel-collector.yml:/etc/otelcol-contrib/otel-collector.yml
    command:
      - --config=/etc/otelcol-contrib/otel-collector.yml
    restart: always
    ports:
      - "4317" # OTLP gRPC receiver
      - "8889" # Prometheus exporter metrics
    depends_on:
      - loki
      - jaeger-all-in-one

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --enable-feature=exemplar-storage # Exemplar, trace ID gibi detayları metriklerle eşleştirmek için kullanılır.
      - --web.enable-remote-write-receiver # Prometheus'un push verisi alabilmesini sağlar.
    restart: always
    ports:
      - '9090:9090'

  grafana:
    container_name: grafana
    image: grafana/grafana
    volumes:
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    restart: always
    ports:
      - "3000:3000"

  jaeger-all-in-one:
    container_name: jaeger
    image: jaegertracing/all-in-one:latest
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: always
    ports:
      - "16686:16686"
      - "14250"

  loki:
    container_name: loki
    image: grafana/loki:latest
    command: -config.file=/etc/loki/local-config.yaml
    restart: always
    ports:
      - "3100"