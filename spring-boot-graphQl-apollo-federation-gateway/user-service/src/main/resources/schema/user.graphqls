scalar Date
scalar Long

type Query {
    getUserResponseById(id: Long!): UserResponse
    getAllUserResponses(pageNo: Int!, pageSize: Int!): PageResponse_UserResponse
    getUserDetailsResponseById(id: Long!): UserDetailsResponse
    existsById(id: Long!): Boolean
}

type Mutation {
    createUser(userCreateRequest: UserCreateRequest!): UserResponse
}

type UserResponse {
    id: ID!
    firstName: String
    lastName: String
    email: String
    createDate: Date
    updateDate: Date
}

input UserCreateRequest {
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    userAuthRole: UserAuthRole!
}


type PageResponse_UserResponse {
    content: [UserResponse]
    totalPages: Int
    totalElements: Long
    number: Int
    size: Int
}


enum UserAuthRole {
    USER
    ADMIN
}

type UserDetailsResponse {
    userResponse: UserResponse
}
